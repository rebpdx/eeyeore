defmodule Webhook.Endpoint do
  use Plug.Router

  @moduledoc """
  A webhook to initalize lightning strikes.

  This module will receive HTTP POST calls and cast messages to the lightning
  renderer. Parameters that can be sent are number of intermitent strikes to
  render, otherwise it'll default to an intermitent number generated by the
  renderer.

  Example payload: {"strikes": 20}
  """

  plug(Plug.Logger)

  plug(:match)
  plug(Plug.Parsers, parsers: [:json], json_decoder: Poison)
  plug(:dispatch)

  get "/ping" do
    send_resp(conn, 200, "pong!")
  end

  post "/lightning" do
    {status, body} =
      case conn.body_params do
        %{"strikes" => strikes} ->
          {:ok, resp} = process_events(strikes)
          {200, resp}

        _ ->
          {:ok, resp} = process_events()
          {200, resp}
      end

    send_resp(conn, status, body)
  end

  post "/strip" do
    request_info =
      "strip requires quantity (integer > 0 of how many LEDs) and start " <>
        "(integer >= 0 of first addressable LED)"

    {status, body} =
      case conn.body_params do
        %{"quantity" => quantity, "start" => start} ->
          {:ok, resp} = process_events(quantity, start)
          {200, resp}

        _ ->
          {:ok, resp} = bad_request(request_info)
          {400, resp}
      end

    send_resp(conn, status, body)
  end

  # TODO: Update this to handle RGB integer input like MQTT and validity check of hex syntax
  post "/color" do
    request_info = "color requires 'color' in the form of RGB HEX startng with #"

    {status, body} =
      case conn.body_params do
        %{"color" => color} ->
          {:ok, resp} = process_color(color)
          {200, resp}

        _ ->
          {:ok, resp} = bad_request(request_info)
          {400, resp}
      end

    send_resp(conn, status, body)
  end

  defp process_events(quantity) when is_integer(quantity) do
    {parsed_quantity, _remainder} = {:lightning, quantity}
    GenServer.cast(Eeyeore.Render, parsed_quantity)
    Poison.encode(%{response: "Received Lightning Event!"})
  end

  defp process_events(quantity) do
    GenServer.cast(Eeyeore.Render, {:lightning, Integer.parse(quantity)})
    Poison.encode(%{response: "Received Lightning Event!"})
  end

  defp process_events(quantity, start) when is_integer(quantity) and is_integer(start) do
    GenServer.cast(Eeyeore.Render, {:strip, quantity, start})
    Poison.encode(%{response: "Received Render Strip Event!"})
  end

  defp process_events do
    GenServer.cast(Eeyeore.Render, :lightning)
    Poison.encode(%{response: "Received Lightning Event!"})
  end

  defp process_color(color) do
    GenServer.cast(Eeyeore.Settings, {:set_color, Blinkchain.Color.parse(color)})
    Poison.encode(%{response: "Recieved Color Change Event!"})
  end

  defp bad_request(request_info) do
    Poison.encode(%{response: "Did not receive property: #{request_info}"})
  end

  match _ do
    send_resp(conn, 404, "Oops... Unknown request.")
  end
end
